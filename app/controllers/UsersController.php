<?php
/**
 * YZOI Online Judge System
 *
 * @copyright   Copyright (c) 2010 YZOI
 * @author      xaero <xaero@msn.cn>
 * @version     $Id: UsersController.php 2015-10-23 13:05 $
 */
namespace YZOI\Controllers;

use Phalcon\Crypt;
use YZOI\Common;
use YZOI\Forms\CaptchaForm;
use YZOI\Forms\RegisterForm;
use YZOI\Forms\ResetForm;
use YZOI\GD;
use YZOI\Models\Mails;
use YZOI\Models\Problems;
use YZOI\Models\Solutions;
use YZOI\Models\Users;
use YZOI\Auth\Exception as AuthException;
use YZOI\Forms\LoginForm;
use YZOI\Uploader;
use \Phalcon\Paginator\Adapter\Model as Paginator;

class UsersController extends ControllerBase
{

    public function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
    }

    public function indexAction()
    {
        $loginUser = $this->auth->getIdentity();

        if (! is_object($loginUser)) {
            $this->flashSession->error("请先登录");
            return $this->response->redirect("users/login");
        }

        $ac_array = $loginUser->problems_solved();
        $try_array = $loginUser->problems_tried();

        $user_prob = array();
        foreach ($try_array as $tyitem) {
            $user_prob[$tyitem] = -1;
        }
        unset($try_array);
        foreach ($ac_array as $acitem) {
            $user_prob[$acitem] = 1;
        }
        unset($ac_array);

        if ($loginUser->active != 'Y') {
            $pos_of = strpos($loginUser->email, '@');
            $this->flashSession->error('用户未激活，请登录你的邮箱 '. substr($loginUser->email, 0, $pos_of-3) . '****@**'. substr($loginUser->email, $pos_of+2) .' 进行激活！');
        }

        $this->view->user_prob = $user_prob;
        $this->view->max_pid = Problems::max_problem_id();

        $this->view->additionalJS = array(
            'highcharts/highcharts.js',
            //'assets/js/user_statistic.php'
        );

        $this->view->user = $loginUser;
        $this->view->title = "用户中心";
        /**
        $this->view->total_statistics = Solutions::count_submission_statistic();
        $this->view->user_statistics = Solutions::count_submission_statistic(array(
            'users_id' => $loginUser->id
        ));
        $this->view->userac_statistics = Solutions::count_submission_statistic(array(
            'users_id' => $loginUser->id,
            'result' => Solutions::STATUS_AC
        ));
        */

        //echo "asdf";

        //echo $this->t->_('hi');
		
		//var_dump($loginUser->has_());
        //var_dump(Solutions::user_solved_problems($this->auth->getIdentity()->id));
        //echo Common::accept_status(1006);
    }

    public function profileAction($id)
    {
        $user = Users::findFirstById($id);

        $user->update_user_solution_state();

        $this->view->user = $user;

        $this->view->additionalJS = array(
            'highcharts/highcharts.js',
            //'assets/js/user_statistic.php'
        );

        $ac_array = $user->problems_solved();
        $try_array = $user->problems_tried();

        $user_prob = array();
        foreach ($try_array as $tyitem) {
            $user_prob[$tyitem] = -1;
        }
        unset($try_array);
        foreach ($ac_array as $acitem) {
            $user_prob[$acitem] = 1;
        }
        unset($ac_array);

        $this->view->user_prob = $user_prob;
        $this->view->max_pid = Problems::max_problem_id();
        $this->view->title = $user->name . "的资料";

        //$this->view->total_statistics = Solutions::count_submission_statistic();
        /**
        $user_statistics = Solutions::count_submission_statistic(array(
            'users_id' => $user->id
        ));
        $userac_statistics = Solutions::count_submission_statistic(array(
            'users_id' => $user->id,
            'result' => Solutions::STATUS_AC
        ));
        unset($user_statistics[0]);
        unset($userac_statistics[0]);
        $this->view->user_statistics = $user_statistics; //删除数组第一个元素（这是用户导入的数据）
        $this->view->userac_statistics = $userac_statistics;
        */
    }

    /*public function mailboxAction()
    {
        $loginUser = $this->auth->getIdentity();

        if (! is_object($loginUser)) {
            $this->flashSession->error("请先登录");
            return $this->response->redirect("users/login");
        }

        $this->view->user = $loginUser;

        $maillist = Mails::findMailListByOwnerId($loginUser->id);
        $this->view->maillist = $maillist;
        $this->view->title = "Mailbox";

        $this->view->additionalJS = array(
            'assets/js/jquery.validate.js'
        );
    }

    public function mailAction($user_id)
    {
        $loginUser = $this->auth->getIdentity();

        if (! is_object($loginUser)) {
            $this->flashSession->error("请先登录");
            return $this->response->redirect("users/login");
        }

        $this->view->user = $loginUser;

        $mails = Mails::find(array(
            "conditions" => "from_user = ?0 and to_user = ?1 or from_user = ?2 and to_user = ?3",
            "bind" => [$loginUser->id, $user_id, $user_id, $loginUser->id],
            "order" => "in_date asc"
        ));
        $chat_user = Users::findFirstById($user_id);
        $this->view->mails = $mails;
        $this->view->chat_user = $chat_user;
        $this->view->title = "与" . $chat_user->name . "的邮件";

        $this->view->additionalJS = array(
            'assets/js/jquery.validate.js'
        );

        $loginUser->clearUnreadMails($user_id);
    }*/

    public function sendmailAction()
    {
        $this->view->disable();
        $loginUser = $this->auth->getIdentity();

        if (! is_object($loginUser)) {
            $this->flashSession->error("请先登录");
            return $this->response->redirect("users/login");
        }

        if ($this->request->isPost()) {
            $uid = $this->request->getPost("uid");
            $content = $this->request->getPost("content", array("trim", "striptags"));
            $content_len = mb_strlen($content,'UTF-8');

            //简单验证，（未验证是否存在用户）
            if (intval($uid) && $content_len>0 && $content_len<=250) {
                $mail = new Mails();
                $mail->to_user = $uid;
                $mail->from_user = $loginUser->id;
                $mail->flag = ($uid < $loginUser->id) ? ($uid . "," . $loginUser->id) : ($loginUser->id . "," . $uid);
                $mail->content = $content;
                $mail->in_date = time();

                if ($mail->create()) {
                    $this->response->setJsonContent(array(
                        'success' => true,
                        'data' => $mail->toArray()
                    ));
                } else {
                    $this->response->setJsonContent(array(
                        'success' => false
                    ));
                }
            }

            return $this->response;
        }
    }

    public function avatarAction()
    {
        $loginUser = $this->auth->getIdentity();

        if (! is_object($loginUser)) {
            $this->flashSession->error("请先登录");
            return $this->response->redirect("users/login");
        }

        $this->view->user = $loginUser;
        $this->view->title = "用户头像修改";

        $this->view->additionalCss = array(
            'assets/css/uploader.css',
            'assets/css/Jcrop.css'
        );
        $this->view->additionalJS = array(
            'assets/js/uploader.js',
            'assets/js/Jcrop.js'
        );

    }

    public function modifyAction()
    {
        $loginUser = $this->auth->getIdentity();

        if (! is_object($loginUser)) {
            $this->flashSession->error("请先登录");
            return $this->response->redirect("users/login");
        }

        if ($this->request->isPost()) {
            $user_id            = $this->request->getPost("id", "int");
            $old_password       = $this->request->getPost("oldpassword");
            $password           = $this->request->getPost("password");
            $confirmPassword    = $this->request->getPost("confirmPassword");
            $nick               = $this->request->getPost("nick", array("trim", "striptags"));
            $email              = $this->request->getPost("email", array("trim", "email"));
            $school             = $this->request->getPost("school", array("trim", "striptags"));
            $display_lang       = $this->request->getPost("display_lang");

            $selected_user = Users::findFirstById($user_id);

            if ($old_password && $password && $confirmPassword && $password == $confirmPassword) {
                // 修改新密码要提供旧密码
                if ($this->security->checkHash($old_password, $selected_user->password)) {
                    // 修改新密码
                    $selected_user->password = $this->security->hash($password);
                    $this->flashSession->warning("密码已更新！");
                } else {
                    $this->flashSession->error("提供的旧密码不正确！密码未更新");
                }
            } else {
                $this->flashSession->warning("注意：你的密码没有更新！");
            }

            $selected_user->nick = $nick;
            $selected_user->email = $email;
            $selected_user->school = $school;
            $selected_user->display_lang = $display_lang;

            if ($selected_user->save() == false) {
                foreach ($selected_user->getMessages() as $message) {
                    $this->flash->error((string) $message);
                }
            } else {
                $this->flash->success("用户资料修改成功！");
                $this->session->set('yzoi-auth-identity', $selected_user);
                $loginUser = $selected_user;
            }
        }

        $this->view->user = $loginUser;
        $this->view->title = "资料修改";
        $this->view->additionalJS = array(
            'assets/js/jquery.validate.js'
        );

        $this->view->form = new RegisterForm($loginUser);
    }

    /**
     * 注册提交表单处理函数，默认显示注册表单
     * @return bool
     */
    public function registerAction()
    {
        $this->view->setRenderLevel(\Phalcon\Mvc\View::LEVEL_ACTION_VIEW);

        $form = new RegisterForm();

        // TODO: 注册出错时，如何保留原来填写的信息
        if ($this->request->isPost()) {
            if ($form->isValid($this->request->getPost()) == false) {
                foreach ($form->getMessages() as $message) {
                    $this->flash->error((string) $message);
                    //var_dump($this->flash);
                }
            } else {
                $username       = $this->request->getPost("name", "alphanum");
                $email          = $this->request->getPost("email", "email");

                if (strlen(trim($username))<4) {
                    $this->flashSession->error("用户名太短！");
                    return $this->response->redirect("users/register");
                }

                $user = Users::findFirst(array("name = ?0", "bind" => ["$username"]));
                if ($user) {
                    $this->flashSession->error("该用户名已存在！");
                    return $this->response->redirect("users/register");
                }
                $user = Users::findFirst(array("email = ?0", "bind" => ["$email"]));
                if ($user) {
                    $this->flashSession->error("该Email已存在！");
                    return $this->response->redirect("users/register");
                }

                $user = new Users();
                $user->name     = $username;
                $user->password = $this->security->hash($this->request->getPost('password', 'trim'));
                $user->email    = $email;
                $user->nick     = $this->request->getPost("nick", "striptags");
                $user->school   = $this->request->getPost("school", "striptags");

                $user->create_at =time();
                $user->ip = $this->request->getClientAddress();
                $user->avatar = rand(1,3) . ".jpg"; // 随机给张图片，省得前端显示头像的逻辑太复杂

                if ($user->save() == false) {
                    foreach ($user->getMessages() as $message) {
                        $this->flash->error((string) $message);
                    }
                } else {
                    $this->flashSession->success("注册成功！");

                    $active_url = Common::site_uri_prefix() .
                                    $this->url->get('users/activation/') .
                                    $user->id . '?c=' . $this->form_user_auth_code($user->name, $user->password);

                    $mail_body = "<p>{$user->name}，感谢你使用YZOI！</p><p>点击以下链接激活您的帐号：<a href='{$active_url}'>{$active_url}</a></p>
<p>若链接无法点击，请复制到浏览器地址栏访问。</p>
<p>此致<br>
YZOI Online Judge.</p>";

                    $recipients = $this->mailer->send($user->email,
                        $user->name . '，您的YZOI帐号激活邮件', $mail_body);

                    if ($recipients) {
                        $this->flashSession->warning("已经向您的注册邮箱<span class='text-danger'>{$user->email}</span>发送了激活邮件，请激活后登录！");
                    } else {
                        $this->flashSession->error("激活邮件发送未成功，请联系76899014@qq.com激活你的帐号");
                    }

                    return $this->response->redirect('users/login');
                }
            }
        }

        $this->view->form = $form;
    }

    public function activationAction($user_id)
    {
        $this->view->disable();

        $code = $this->request->getQuery('c');

        $user = Users::findFirstById($user_id);

        if ($user && $user->active != 'Y') {
            $de_code = $this->form_user_auth_code($user->name, $user->password);

            if ($de_code == $code) {
                $this->flashSession->success("账号激活成功！");

                $user->active = 'Y';
                $user->view_perm = 1;
                $user->ip = $this->request->getClientAddress();
                $user->last_login = time();
                $user->save();

                $this->session->set('yzoi-auth-identity', $user);

                return $this->response->redirect('users');

            }
        } else {
            $this->flashSession->warning("账号无需重复激活！");
            return $this->response->redirect('users');
        }

    }

    public function forgotAction()
    {
        $this->view->setRenderLevel(\Phalcon\Mvc\View::LEVEL_ACTION_VIEW);

        if ($this->request->isPost()) {
            $captcha = $this->request->getPost('captcha', array('trim', 'alphanum'));
            $email = $this->request->getPost('password_reset_email', array('trim', 'email'));
            $user = Users::findFirst(array("email = ?0", "bind" => [$email]));

            if (($captcha == $_SESSION['yzoixcaptcha']) && $user) {
                $crypt = new Crypt();
                $crypt->setMode('cfb');
                $encrypt_user_id = $crypt->encryptBase64(time() . 'x' . $user->id, $this->config->application->cryptSalt, true);

                $reset_url = Common::site_uri_prefix() . $this->url->get('users/reset') . '?token='. $encrypt_user_id;


                $mail_body = "<p>{$user->name}的密码重置服务</p>
<p>您收到这封邮件，是由于这个邮箱地址在YZOI被登记为用户邮箱，且该用户请求使用Email密码重置功能所致。</p>
<p>---------------------------<br>
<strong>重要！</strong><br>
---------------------------</p>
<p>如果您没有提交密码重置的请求或不是YZOI的注册用户，请立即忽略并删除这封邮件。只有在您确认需要重置密码的情况下，才需要继续阅读下面的内容。</p>
<p>---------------------------<br>
<strong>密码重置说明</strong><br>
---------------------------</p>
<p>请在24小时内，通过点击下面的链接重置您的密码：<a href='{$reset_url}'>{$reset_url}</a>
（若链接无法点击，请复制到浏览器地址栏访问）</p>
<p>本请求提交者的IP是{$this->request->getClientAddress()}</p>
<p>此致<br>
YZOI Online Judge.</p>";


                $recipients = $this->mailer->send($user->email,
                    $user->name . "，YZOI密码重置服务", $mail_body);

                if ($recipients) {
                    $this->flashSession->warning("已将密码重置链接发往<span class='text-danger'>{$user->email}</span>，请重置后登录！");
                } else {
                    $this->flashSession->error("邮件发送未成功，请联系76899014@qq.com重置密码！");
                }

                return $this->response->redirect('users/login');
            } else {
                $this->flashSession->warning("Email或验证码错误！");
                return $this->response->redirect('users/login');
            }
        }
    }

    public function resetAction()
    {
        $this->view->setRenderLevel(\Phalcon\Mvc\View::LEVEL_ACTION_VIEW);

        $form = new ResetForm();

        if ($this->request->isPost()) {
            // 保存新密码
            if ($form->isValid($this->request->getPost())) {

                $password = $this->security->hash($this->request->getPost('password', 'trim'));

                $token = $this->request->getPost('token');
                $crypt = new Crypt();
                $crypt->setMode('cfb');
                $token_decrypt = $crypt->decryptBase64($token, $this->config->application->cryptSalt, true);
                $token_decrypt = explode('x', $token_decrypt);

                if (count($token_decrypt)>1) {
                    $date_from = $token_decrypt[0];
                    $now = time();
                    $user = Users::findFirstById($token_decrypt[1]);

                    if ((intval($now) - intval($date_from) <= 86400) && $user) {

                        // 重置密码
                        $user->password = $password;
                        if ($user->save() == false) {
                            foreach ($user->getMessages() as $message) {
                                $this->flashSession->error((string) $message);
                            }
                        } else {
                            $this->flashSession->success("密码重置成功，请重新登录！");
                        }

                    } else {
                        //echo $code;
                        $this->flashSession->warning("找不到用户或请求已过期，无法重置");
                    }

                } else {
                    $this->flashSession->warning("请求错误，无法重置");
                }

            } else {
                foreach ($form->getMessages() as $message) {
                    $this->flashSession->error((string) $message);
                    //var_dump($this->flash);
                }
            }

            return $this->response->redirect('users/login');
        }

        $token = $this->request->getQuery('token');
        $crypt = new Crypt();
        $crypt->setMode('cfb');
        $token_decrypt = $crypt->decryptBase64($token, $this->config->application->cryptSalt, true);
        //var_dump($token_decrypt);
        $token_decrypt = explode('x', $token_decrypt); //加密过的时间戳和userid，格式:时间戳x用户ID，如12345x1

        if (count($token_decrypt)>1) {
            $date_from = $token_decrypt[0];
            $now = time();
            $user = Users::findFirstById($token_decrypt[1]);

            if ((intval($now) - intval($date_from) <= 86400) && $user) {

                // 显示重置表单
                $this->view->form = $form;
                $this->view->token = $token;
            } else {
                //echo $code;
                $this->flashSession->warning("找不到用户或请求已过期，无法重置");
                return $this->response->redirect('users/login');
            }
        } else {
            //var_dump($token);
            //var_dump($token_decrypt);
            $this->flashSession->warning("请求错误，无法重置");
            return $this->response->redirect('users/login');
        }

        //return $this->response->redirect('users/login');

    }

    protected function form_user_auth_code($username, $password)
    {
        $code = $username . $this->config->application->cryptSalt;
        $code = md5($code) . md5($password);

        return $code;
    }

    protected function gotoLastPlace($default = "/")
    {
        if ($this->session->has("Last-Place")) {

            $referer = $this->session->get("Last-Place");

            $this->session->remove("Last-Place");
            if (strpos($referer, $this->request->getHttpHost()."/") !== false) {
                return $this->response->setHeader("Location", $referer);
            }
        }

        return $this->response->redirect($default);
    }

    public function loginAction()
    {
        // Goto the last place
        if (! $this->session->has("Last-Place")) {
            $this->session->set("Last-Place", $this->request->getHTTPReferer());
        }

        if ($this->auth->getIdentity()) {
            return $this->gotoLastPlace("users");
        }

        $this->view->setRenderLevel(\Phalcon\Mvc\View::LEVEL_ACTION_VIEW);

        $form = new LoginForm();

        try {
            if (!$this->request->isPost()) {
                if ($this->auth->hasRememberMe()) {
                    return $this->auth->loginWithRememberMe();
                }
            } else {
                if ($form->isValid($this->request->getPost()) == false) {
                    foreach ($form->getMessages() as $message) {
                        $this->flash->error($message);
                    }
                } else {
                    $this->auth->check(array(
                        'name' => $this->request->getPost('name'),
                        'password' => $this->request->getPost('password'),
                        'remember' => $this->request->getPost('remember')
                    ));

                    return $this->gotoLastPlace("users");
                }
            }
        } catch (AuthException $e) {
            $this->flashSession->error($e->getMessage());
        }

        //$this->flash->notice("asdfewadsf");

        //默认显示登录表单
        $this->view->form = $form;
        $this->view->captform = new CaptchaForm();;
    }

    public function logoutAction()
    {
        $this->auth->remove();
        return $this->response->redirect('index');
    }

    public function rankAction()
    {
        $this->view->title = "用户总排名";

        $ranks = Users::findUsersRanks();
        $numberPage = $this->request->getQuery("page", "int");

        $paginator = new Paginator(array(
            'data' => $ranks,
            'limit' => Users::FRONT_PER_PAGE,
            'page' => $numberPage
        ));

        $this->view->page = $paginator->getPaginate();
    }

    public function avatarupAction()
    {
        $this->view->disable();

        $loginUser = $this->auth->getIdentity();

        if (! is_object($loginUser)) {
            $this->flashSession->error("请先登录");
            return $this->response->redirect("users/login");
        }


        if ($this->request->isPost())
        {
            $uploader = new Uploader(
                explode(',', $this->config->uploader->avatar_type),
                $this->config->uploader->avatar_size
                );

            $avatar_dimension = intval($this->config->uploader->avatar_dimension);
            // 在preview基础上截图的，因此要大一点：540x540pix
            $avatar_preview = $avatar_dimension*4;
            // 上传的照片最小允许72x72pix，截图后还是180x180pix
            $avatar_dimension *= 0.4;

            $avatar_dir = $this->config->uploader->avatar_dir;

            $result = $uploader->upload($avatar_dir . 'tmp/', $loginUser->name); //保存至临时目录

            if (isset($result['success']) && $result['success'])
            {
                $src_path = $avatar_dir . 'tmp/' . $uploader->get_real_name();

                $gd = new GD();
                $gd->open($src_path);

                if ($gd->is_image())
                {
                    if ($gd->get_width() < $avatar_dimension || $gd->get_height() < $avatar_dimension)
                    {
                        $this->response->setJsonContent(array(
                            'success' => false,
                            'data' =>  '图片尺寸太小'
                        ));
                    } else {
                        if ($gd->get_width() > $avatar_preview || $gd->get_height() > $avatar_preview)
                        {
                            $gd->resize_to($avatar_preview, $avatar_preview, 'scale');
                            $gd->save_to($src_path);
                        }
                        $this->response->setJsonContent(array(
                            'success' => true,
                            'data' => array(
                                'imgname' => $uploader->get_real_name(),
                                'width' => $gd->get_width(),
                                'height' => $gd->get_height()
                            )
                        ));
                    }
                }
            } else if (isset($result['error'])) {
                $this->response->setJsonContent(array(
                    'success' => false,
                    'data' =>  $result['error']
                ));
            }

            return $this->response;
        }
    }

    public function avatarcropAction()
    {
        $this->view->disable();

        $loginUser = $this->auth->getIdentity();

        if (! is_object($loginUser)) {
            $this->flashSession->error("请先登录");
            return $this->response->redirect("users/login");
        }

        $this->view->user = $loginUser;

        if ($this->request->isPost()) {
            $tmp_avatar = $this->request->getPost('tmp_avatar');
            $x = $this->request->getPost('xcoord');
            $y = $this->request->getPost('ycoord');
            $w = $this->request->getPost('cropw');
            $h = $this->request->getPost('croph');

            $avatar_dimension = intval($this->config->uploader->avatar_dimension);
            $avatar_dir = $this->config->uploader->avatar_dir;

            $src_path = $avatar_dir . 'tmp/' . $tmp_avatar;
            if (!file_exists($src_path)) {
                $this->response->setJsonContent(array(
                    'success' => false,
                    'data' => 'Can not find avatar'
                ));
            } else {
                $gd = new GD();
                $gd->open($src_path);
                if ($gd->is_image()) {
                    $gd->crop($x, $y, $w, $h);
                    $gd->resize_to($avatar_dimension, $avatar_dimension, 'scale_fill');

                    $avatar_name = $loginUser->name . '.' . $gd->get_type();
                    $gd->save_to($avatar_dir . 'avatars/' . $avatar_name);

                    $user = Users::findFirstById($loginUser->id);
                    $user->avatar = $avatar_name;
                    $user->update();

                    @unlink($src_path);

                    $this->response->setJsonContent(array(
                        'success' => true,
                        'data' => $avatar_name
                    ));
                } else {
                    $this->response->setJsonContent(array(
                        'success' => false,
                        'data' => 'It is not a image'
                    ));
                }
            }

            return $this->response;
        }
    }

}