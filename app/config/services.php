<?php/** * YZOI Online Judge System * * @copyright   Copyright (c) 2010 YZOI * @author      xaero <xaero@msn.cn> * @version     $Id: services.php 2015-10-22 17:35 $ */use Phalcon\DI\FactoryDefault,    Phalcon\Mvc\View,    Phalcon\Mvc\Dispatcher,    Phalcon\Mvc\Url as UrlResolver,    Phalcon\Db\Adapter\Pdo\Mysql as DbAdapter,    Phalcon\Mvc\View\Engine\Volt as VoltEngine,    Phalcon\Mvc\Model\MetaData\Memory as MetaDataAdapter,    Phalcon\Session\Adapter\Files as SessionAdapter,    Phalcon\Cache\Frontend\Output as FrontendCache,    Phalcon\Cache\Frontend\Data as FrontendData,    Phalcon\Cache\Backend\File as BackendCache,    Phalcon\Cache\Backend\Memcache as BackendMemcache,    Phalcon\Crypt,    Phalcon\Security,    Phalcon\Events\Manager as EventsManager,    Phalcon\Translate\Adapter\Gettext,    Phalcon\Http\Response\Cookies;use YZOI\Auth\Auth,    YZOI\Mailer;// The FactoryDefault Dependency Injector automatically register the right services providing a full stack framework$di = new FactoryDefault();$di->set('router', function(){    return require __DIR__ . '/routes.php';}, true);// The URL component is used to generate all kind of urls in the application//$di->set('url', function() use ($config) {////    $url = new UrlResolver();////    $url->setBaseUri($config->application->baseUri);//    return $url;//}, true);// Database connection is created based in the parameters defined in the configuration file$di->set('db', function() use ($config) {    return new DbAdapter(array(        'host' => $config->database->host,        'username' => $config->database->username,        'password' => $config->database->password,        'dbname' => $config->database->dbname,        'charset' => 'utf8'    ));});//临时数据库$di->set('dbOldyzoi', function() {    return new DbAdapter(array(        "host" => "localhost",        "username" => "root",        "password" => "159632",        "dbname" => "yzoi",        'charset' => 'utf8'    ));});$di->set('config', $config, true);// If the configuration specify the use of metadata adapter use it or use memory otherwise$di->set('modelsMetadata', function() use ($config) {    return new MetaDataAdapter(array(        'metaDataDir' => $config->application->cacheDir . 'metaData/'    ));});$di->setShared('security', function () {    $security = new Security();    // set Work factor (how many times we go through)    $security->setWorkFactor(12); // can be a number from 1-12    // set Default Hash    $security->setDefaultHash(Security::CRYPT_BLOWFISH_Y); // choose default hash    return $security;});/** * Crypt service */$di->set('crypt', function () use ($config) {    $crypt = new Crypt();    $crypt->setKey($config->application->cryptSalt);    return $crypt;});$di->set('cookies', function () {    $cookies = new Cookies();    $cookies->useEncryption(true);    return $cookies;}, true);// Start the session the first time some component request the session service$di->set('session', function () {    $session = new SessionAdapter();    $session->start();    return $session;});// authentication$di->set('auth', '\YZOI\Auth\Auth');$di->set('mailer', function () {    return new Mailer();});$di->set('translation', function () use ($di) {    $lang = $di->get('auth')->getIdentity();    $lang = ($lang) ? $lang->display_lang : 'zh';    $lang_dir = $di->get('config')->application->langDir;    $controller = $di->get('router')->getControllerName();    if (! $controller) $controller = 'index';    require $lang_dir . $lang . '/main.php';    $lang_addtional = $lang_dir . $lang . '/' . $controller . '.php';    if (file_exists($lang_addtional))        require $lang_addtional;    $translation = new Phalcon\Translate\Adapter\NativeArray(array(        "content" => $_messages    ));    //var_dump($translation);    return $translation;}, true);/*$di->set('swiftmailer', function() use ($config) {    include $config->application->libraryDir . 'swift_required.php';    $transport = Swift_SmtpTransport::newInstance($config->smtp_host)        ->setUsername($config->smtp_username)        ->setPassword($config->smtp_password);    $mailer = Swift_Mailer::newInstance($transport);    return $mailer;});*//** * Translation function call anywhere * * @param $string * * @return mixed */if (! function_exists('__')) {    function __($string, array $placeholder = null)    {        $translation = \Phalcon\Di::getDefault()->get('translation');        return $translation->_($string, $placeholder);    }}